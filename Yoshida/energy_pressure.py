#Post-processing script for .csv data generated by taylor_green.cpp

import csv
from csv import writer
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt

def properties(savefile,L):
    savefile = "cache/" + savefile + ".csv"  #Rename to required output file

    #Read in the .csv data file:
    file = open(savefile)
    csvreader = csv.reader(file)
    rows = []
    for row in csvreader:
      rows.append(row)
    file.close()

    #Extract header information:
    dt = float(rows[0][0])
    T = int(rows[0][1])
    Tsave = int(rows[0][2])
    N = int(rows[0][3])
    NumSave = int(np.ceil((T+1)/Tsave)) #Number of save entries

    names = rows[1][:]

    #Initialise storage for data:
    time = np.zeros([NumSave,1])
    pressure = np.zeros([NumSave,1])
    temp = np.zeros([NumSave,1])
    pos = np.zeros([NumSave,N,3])
    vel = np.zeros([NumSave,N,3])

    #Extract and reshape the data:
    data = np.zeros(3*N)
    for i in range(NumSave):

        start = i*(N+1) + 2

        #Header data for time-step:
        time[i] = float(rows[start][0])
        temp[i] = float(rows[start][1])
        pressure[i] = float(rows[start][2])

        #
        # #Vectors variables:
        # for j in range(N):
        #   for k in range(3):
        #     pos[i,j,k] = float(rows[start+j+1][k])

    # print(temp.mean())
    Conditions = [temp.mean(), np.median(temp), pressure.mean(), np.median(pressure)]
    # print(Conditions)

    List = [N, L, Conditions[0], Conditions[1], Conditions[2], Conditions[3]]
    with open('final_conditions.csv', 'a') as csv_file:
        writer(csv_file).writerow(List)
        csv_file.close()
    
    return Conditions
    # print(f"Temperature: \nmean: {temp.mean()}K, median: {np.median(temp)}K \n")
    # print(f"Pressure: \nmean: {pressure.mean()}Pa, median: {np.median(pressure)}Pa \n")


    # #-------------------------------------------
    # #Plot change in total energy and magnitude of total angular momentum:
    # ax = plt.figure(figsize=(15,10),dpi=80).add_subplot(1,1,1)
    #
    # ax.plot(time, 100*(energy - energy[0])/energy[0])
    # ax.set_title('Fractional change in total energy')
    # ax.set_xlabel('$t$')
    # ax.set_ylabel('$\Delta E$ in %')
    #
    # figname = 'energy.png'
    # plt.savefig(figname, dpi=80, bbox_inches = 'tight')
    #
    # plt.show()
    #
    # ax = plt.figure(figsize=(15,10),dpi=80).add_subplot(1,1,1)
    # ax.plot(time, 100*(Lmag - Lmag[0])/Lmag[0])
    # ax.set_title('Fractional change in total angular momentum')
    # ax.set_xlabel('$t$')
    # ax.set_ylabel('$\Delta L$ in %')
    #
    # figname = 'angular_momentum.png'
    # plt.savefig(figname, dpi=80, bbox_inches = 'tight')
    #
    # plt.show()
